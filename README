README
Author: Eric Butler <edbutler@andrew.cmu.edu>
	Harry Gifford <hgifford@cmu.edu>
	Steven Fackler <sfackler@andrew.cmu.edu>
	Srinath Giri <srinathg@andrew.cmu.edu>

---------------------------------------------------------------------------
Building the Code
---------------------------------------------------------------------------

This project uses the CMake build system (www.cmake.org). CMake is a kind of
"meta build-system," in that it creates a build system for you. It supports
many different build systems, ranging from Unix Makefiles to Visual Studio
projects to XCode projects.

1) If you don't have CMake installed, you should install it. If you're running
    Linux, it should be available through your disto's package manager
    (apt-get, pacman, ports, etc). Windows and OSX installers can be downloaded
    from http://www.cmake.org/cmake/resources/software.html
2) Open up a command prompt in the "build" directory and run "cmake ../src".
    CMake will generate the build system in the build directory. By default,
    CMake will generate Makefiles on Linux and OSX and a Visual Studio project
    on Windows. If you'd like to change that, you can pass a different
    "generator" to cmake with the -G flag. A full list of generators can be
    found at the bottom of the output generated by running "cmake". For
    example, "cmake -G 'Xcode' ../src" will generate an Xcode project on OSX.
3) You can now use the build system in the "build" directory. The default
    target will compile everything for you, and the "install" target will copy
    the p2 executable to the main "p2" directory.

---------------------------------------------------------------------------
Running the Program
---------------------------------------------------------------------------

Usage: p1

Instructions:

    Use the mouse and 'w', 'a', 's', 'd', 'q', and 'e' to move the
    camera around. The keys translate the camera, and left and right
    mouse buttons rotate the camera.

    Press 'f' to take a screenshot of the current frame buffer. It is
    written to a file whose name is based on the current system time.

---------------------------------------------------------------------------
Source Files and Directory Structure
---------------------------------------------------------------------------
README              -- this file
writeup.txt#        -- Description of your project and implementation.

models/             -- models used in the project
textures/           -- textures used in the project

windows/            -- Visual Studio libraries and documentation.

src/p1
    main            -- Main function and application backend.
    project#        -- Shell for implementation. This is the main
                        file you must edit.

src/application/
    application     -- SDL backend, runs main loop
    camera_roam     -- Functions for camera control via mouse and keyboard
    imageio         -- Functions to load and save PNG files
    opengl          -- Header to include correct OpenGL headers

src/math/
    camera*         -- Camera class with functions to mutate
    color           -- A class for RGB colors and related functions
    math*           -- Basic header and a few generic functions
    matrix          -- 3D, 4D matrix classes and several related functions
    quaternion*     -- Quaternion class and several related functions--very
                            useful for 3D rotations.
    vector*         -- 2D, 3D, 4D vector classes and many related functions

src/scene/
    heightmap       -- Implementation of a heightmap as a watersurface.
    mesh            -- Triangle mesh and OBJ loader

src/glew/           -- files used in building GLEW for the project

src/SDLmain/        -- SDL libraries (used for keypress event handling)
